<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on omoikane.dev</title>
		<link>https://www.omoikane.dev/posts/</link>
		<description>Recent content in Posts on omoikane.dev</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Sat, 11 May 2019 22:03:29 +0900</lastBuildDate>
		<atom:link href="https://www.omoikane.dev/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>C&#43;&#43;のWeb Framework oat&#43;&#43; で Hello World</title>
			<link>https://www.omoikane.dev/posts/oat&#43;&#43;/</link>
			<pubDate>Sat, 11 May 2019 22:03:29 +0900</pubDate>
			
			<guid>https://www.omoikane.dev/posts/oat&#43;&#43;/</guid>
			<description>大きめのデータ（といっても100万点のオーダだけど）を扱うWebアプリを作りたいのだが Pythonだと遅いので、C++で書きたい。 ということ</description>
			<content type="html"><![CDATA[

<p>大きめのデータ（といっても100万点のオーダだけど）を扱うWebアプリを作りたいのだが
Pythonだと遅いので、C++で書きたい。
ということで、oat++というC++で書かれたフレームワークがあったので、スケルトンコードを作成してみた。
ドキュメントもあまり詳しくなく、ちょっと苦労したので忘れないようにblogで公開しておく。</p>

<p>前述の通りoat++は、C++で書かれたWebフレームワークでパフォーマンスがべらぼうに良いらしい。
まぁネイティブコードなのでそりゃ速いよねー もちろんオープンソース。
さらに他のライブラリに依存しないのが使いやすそう。</p>

<p>oat++のWebページは、<a href="https://oatpp.io">https://oatpp.io</a> GitHubのリポジトリは、 <a href="https://github.com/oatpp/oatpp">https://github.com/oatpp/oatpp</a> である。
今回は、Debian9 stretchでコンパイル、実行を行った。</p>

<h2 id="インストール方法">インストール方法</h2>
<div class="highlight"><pre class="chroma"><code class="language-shell" data-lang="shell">sudo apt-get -y install build-essential cmake git
git clone https://github.com/oatpp/oatpp <span class="o">&amp;&amp;</span> mkdir oatpp/build
<span class="nb">cd</span> oatpp/build <span class="o">&amp;&amp;</span> cmake .. <span class="o">&amp;&amp;</span> make <span class="o">&amp;&amp;</span> sudo make install</code></pre></div>
<p>必要なパッケージは、build-essentialとcmakeがあれば特にいらない。gitでcloneしてbuildするだけ。
かんたんかんたん。</p>

<h2 id="hello-world">Hello World</h2>

<p>さて、ここからが本題。
今回作成したコードは、以下の3つのファイルである。
<a href="https://github.com/oatpp/example-crud">https://github.com/oatpp/example-crud</a> を参考にした。</p>

<ul>
<li>app.cc</li>
<li>app_component.hh</li>
<li>controller.hh</li>
</ul>

<h3 id="app-cc">app.cc</h3>
<div class="highlight"><pre class="chroma"><code class="language-C++" data-lang="C++"><span class="c1">//app.cc
</span><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;oatpp/network/server/Server.hpp&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;./app_component.hh&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;./controller.hh&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">void</span> <span class="nf">run</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">AppComponent</span> <span class="n">components</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">router</span> <span class="o">=</span> <span class="n">components</span><span class="p">.</span><span class="n">httpRouter</span><span class="p">.</span><span class="n">getObject</span><span class="p">();</span>
        <span class="k">auto</span> <span class="n">controller</span> <span class="o">=</span> <span class="n">Controller</span><span class="o">::</span><span class="n">createShared</span><span class="p">();</span>
        <span class="n">controller</span><span class="o">-&gt;</span><span class="n">addEndpointsToRouter</span><span class="p">(</span><span class="n">router</span><span class="p">);</span>

        <span class="n">oatpp</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">Server</span> <span class="n">server</span><span class="p">(</span><span class="n">components</span><span class="p">.</span><span class="n">serverConnectionProvider</span><span class="p">.</span><span class="n">getObject</span><span class="p">(),</span> <span class="n">components</span><span class="p">.</span><span class="n">serverConnectionHandler</span><span class="p">.</span><span class="n">getObject</span><span class="p">());</span>
        <span class="n">server</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
        <span class="n">oatpp</span><span class="o">::</span><span class="n">base</span><span class="o">::</span><span class="n">Environment</span><span class="o">::</span><span class="n">init</span><span class="p">();</span>
        <span class="n">run</span><span class="p">();</span>
        <span class="n">oatpp</span><span class="o">::</span><span class="n">base</span><span class="o">::</span><span class="n">Environment</span><span class="o">::</span><span class="n">destroy</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div>
<p>まずは、main関数が含まれるapp.cc。サーバの初期化と起動を行っている。</p>

<h3 id="app-component-hh">app_component.hh</h3>

<p>次に、app_component.hhは、app.ccのrun関数で、serverを初期化に必要なオブジェクトインスタンスを作成するクラスAppComponentを
定義している。</p>
<div class="highlight"><pre class="chroma"><code class="language-C++" data-lang="C++"><span class="c1">// app_conponent.hh
</span><span class="c1"></span><span class="cp">#pragma onece
</span><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&#34;oatpp/web/server/HttpConnectionHandler.hpp&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;oatpp/web/server/HttpRouter.hpp&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;oatpp/network/server/SimpleTCPConnectionProvider.hpp&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&#34;oatpp/core/macro/component.hpp&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="cm">/**
</span><span class="cm"> *  Class which creates and holds Application components and registers components in oatpp::base::Environment
</span><span class="cm"> *  Order of components initialization is from top to bottom
</span><span class="cm"> */</span>
<span class="k">class</span><span class="err"> </span><span class="nc">AppComponent</span> <span class="p">{</span>
        <span class="k">private</span><span class="o">:</span>
        <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">PORT</span> <span class="o">=</span> <span class="mi">8000</span><span class="p">;</span>

        <span class="k">public</span><span class="o">:</span>
    
  <span class="cm">/**
</span><span class="cm">   *  Create ConnectionProvider component which listens on the port
</span><span class="cm">   */</span>
  <span class="n">OATPP_CREATE_COMPONENT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">oatpp</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">ServerConnectionProvider</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">serverConnectionProvider</span><span class="p">)([]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">oatpp</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">SimpleTCPConnectionProvider</span><span class="o">::</span><span class="n">createShared</span><span class="p">(</span><span class="n">PORT</span><span class="p">);</span>
  <span class="p">}());</span>
  
  <span class="cm">/**
</span><span class="cm">   *  Create Router component
</span><span class="cm">   */</span>
  <span class="n">OATPP_CREATE_COMPONENT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">oatpp</span><span class="o">::</span><span class="n">web</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">HttpRouter</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">httpRouter</span><span class="p">)([]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">oatpp</span><span class="o">::</span><span class="n">web</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">HttpRouter</span><span class="o">::</span><span class="n">createShared</span><span class="p">();</span>
  <span class="p">}());</span>
  
  <span class="cm">/**
</span><span class="cm">   *  Create ConnectionHandler component which uses Router component to route requests
</span><span class="cm">   */</span>
  <span class="n">OATPP_CREATE_COMPONENT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">oatpp</span><span class="o">::</span><span class="n">network</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">HttpRouter</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">serverConnectionHandler</span><span class="p">)([]</span> <span class="p">{</span>
    <span class="n">OATPP_COMPONENT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">oatpp</span><span class="o">::</span><span class="n">web</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">HttpRouter</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">router</span><span class="p">);</span> <span class="c1">// get Router component
</span><span class="c1"></span>    <span class="k">return</span> <span class="n">oatpp</span><span class="o">::</span><span class="n">web</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">HttpConnectionHandler</span><span class="o">::</span><span class="n">createShared</span><span class="p">(</span><span class="n">router</span><span class="p">);</span>
  <span class="p">}());</span>  
<span class="p">};</span>
</code></pre></div>
<p>OATPP_CREATE_COMPONENT マクロは、oatpp/core/macro/component.hpp で以下のように定義されている。</p>
<div class="highlight"><pre class="chroma"><code class="language-C++" data-lang="C++"><span class="cp">#define OATPP_CREATE_COMPONENT(TYPE, NAME) \
</span><span class="cp"></span><span class="n">oatpp</span><span class="o">::</span><span class="n">base</span><span class="o">::</span><span class="n">Environment</span><span class="o">::</span><span class="n">Component</span><span class="o">&lt;</span><span class="n">TYPE</span><span class="o">&gt;</span> <span class="n">NAME</span> <span class="o">=</span> <span class="n">oatpp</span><span class="o">::</span><span class="n">base</span><span class="o">::</span><span class="n">Environment</span><span class="o">::</span><span class="n">Component</span><span class="o">&lt;</span><span class="n">TYPE</span><span class="o">&gt;</span>
</code></pre></div>
<p>変数を宣言しているだけでした。</p>

<p>このクラスでは、ServerConnectionProvider、HttpRouter、HttpConnectionHandlerを作成している。</p>

<h3 id="controller-hh">controller.hh</h3>

<p>そして、controller.hhでは、URLマッピングと呼ばれたときの処理を記述する、Controllerクラスを定義している。</p>
<div class="highlight"><pre class="chroma"><code class="language-C++" data-lang="C++"><span class="c1">//controller.hh
</span><span class="c1"></span><span class="cp">#pragma onece
</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&#34;oatpp/web/server/api/ApiController.hpp&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;oatpp/parser/json/mapping/ObjectMapper.hpp&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;oatpp/core/macro/codegen.hpp&#34;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&#34;oatpp/core/macro/component.hpp&#34;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;sstream&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">class</span><span class="err"> </span><span class="nc">Controller</span> <span class="o">:</span> <span class="k">public</span> <span class="n">oatpp</span><span class="o">::</span><span class="n">web</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">api</span><span class="o">::</span><span class="n">ApiController</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
        <span class="n">Controller</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">ObjectMapper</span><span class="o">&gt;&amp;</span> <span class="n">objectMapper</span><span class="p">)</span>
                <span class="o">:</span> <span class="n">oatpp</span><span class="o">::</span><span class="n">web</span><span class="o">::</span><span class="n">server</span><span class="o">::</span><span class="n">api</span><span class="o">::</span><span class="n">ApiController</span><span class="p">(</span><span class="n">objectMapper</span><span class="p">)</span>
        <span class="p">{}</span>

        <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Controller</span><span class="o">&gt;</span> <span class="n">createShared</span><span class="p">(</span><span class="n">OATPP_COMPONENT</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">ObjectMapper</span><span class="o">&gt;</span><span class="p">,</span><span class="n">objectMapper</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Controller</span><span class="o">&gt;</span><span class="p">(</span><span class="n">objectMapper</span><span class="p">);</span>
        <span class="p">}</span>


<span class="cp">#include</span> <span class="cpf">OATPP_CODEGEN_BEGIN(ApiController)</span><span class="cp">
</span><span class="cp"></span>
<span class="n">ENDPOINT</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">html</span> <span class="o">=</span>
    <span class="s">&#34;&lt;html lang=&#39;en&#39;&gt;&#34;</span>
    <span class="s">&#34;&lt;head&gt;&#34;</span>
    <span class="s">&#34;&lt;meta charset=utf-8/&gt;&#34;</span>
    <span class="s">&#34;&lt;/head&gt;&#34;</span>
    <span class="s">&#34;&lt;body&gt;&#34;</span>
    <span class="s">&#34;&lt;p&gt;Hello World&lt;/p&gt;&#34;</span>
    <span class="s">&#34;&lt;/body&gt;&#34;</span>
    <span class="s">&#34;&lt;/html&gt;&#34;</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">response</span> <span class="o">=</span> <span class="n">createResponse</span><span class="p">(</span><span class="n">Status</span><span class="o">::</span><span class="n">CODE_200</span><span class="p">,</span> <span class="n">html</span><span class="p">);</span>
    <span class="n">response</span><span class="o">-&gt;</span><span class="n">putHeader</span><span class="p">(</span><span class="n">Header</span><span class="o">::</span><span class="n">CONTENT_TYPE</span><span class="p">,</span> <span class="s">&#34;text/html&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">ENDPOINT</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="s">&#34;/get&#34;</span><span class="p">,</span> <span class="n">get_test</span><span class="p">,</span> <span class="n">REQUEST</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">IncomingRequest</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
<span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">resp</span> <span class="o">=</span> <span class="p">(</span><span class="n">request</span><span class="o">-&gt;</span><span class="n">getQueryParameter</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">))</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">();</span>

    <span class="k">auto</span> <span class="n">response</span> <span class="o">=</span> <span class="n">createResponse</span><span class="p">(</span><span class="n">Status</span><span class="o">::</span><span class="n">CODE_200</span><span class="p">,</span> <span class="n">resp</span><span class="p">);</span>
    <span class="n">response</span><span class="o">-&gt;</span><span class="n">putHeader</span><span class="p">(</span><span class="n">Header</span><span class="o">::</span><span class="n">CONTENT_TYPE</span><span class="p">,</span> <span class="s">&#34;text/plain&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
<span class="p">}</span>


<span class="n">ENDPOINT</span><span class="p">(</span><span class="s">&#34;POST&#34;</span><span class="p">,</span> <span class="s">&#34;/post&#34;</span><span class="p">,</span> <span class="n">post_test</span><span class="p">,</span> <span class="n">BODY_STRING</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">request</span><span class="p">)</span>
<span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">resp</span> <span class="o">=</span> <span class="n">request</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">();</span>

    <span class="k">auto</span> <span class="n">response</span> <span class="o">=</span> <span class="n">createResponse</span><span class="p">(</span><span class="n">Status</span><span class="o">::</span><span class="n">CODE_200</span><span class="p">,</span> <span class="n">resp</span><span class="p">);</span>
    <span class="n">response</span><span class="o">-&gt;</span><span class="n">putHeader</span><span class="p">(</span><span class="n">Header</span><span class="o">::</span><span class="n">CONTENT_TYPE</span><span class="p">,</span> <span class="s">&#34;text/plain&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
<span class="p">}</span>


<span class="n">ENDPOINT</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="s">&#34;/query-test&#34;</span><span class="p">,</span> <span class="n">query_test</span><span class="p">,</span> 
        <span class="n">QUERY</span><span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="s">&#34;lon&#34;</span><span class="p">),</span> <span class="n">QUERY</span><span class="p">(</span><span class="n">Float64</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="s">&#34;lat&#34;</span><span class="p">)</span>
<span class="p">)</span>
<span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">resp</span><span class="p">;</span>
        <span class="n">resp</span><span class="o">&lt;&lt;</span> <span class="s">&#34;p=&#34;</span><span class="o">&lt;&lt;</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">c_str</span><span class="p">()</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span>
                <span class="o">&lt;&lt;</span> <span class="s">&#34;q=&#34;</span><span class="o">&lt;&lt;</span><span class="n">q</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="k">auto</span> <span class="n">response</span> <span class="o">=</span> <span class="n">createResponse</span><span class="p">(</span><span class="n">Status</span><span class="o">::</span><span class="n">CODE_200</span><span class="p">,</span> <span class="n">resp</span><span class="p">.</span><span class="n">str</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
    <span class="n">response</span><span class="o">-&gt;</span><span class="n">putHeader</span><span class="p">(</span><span class="n">Header</span><span class="o">::</span><span class="n">CONTENT_TYPE</span><span class="p">,</span> <span class="s">&#34;text/plain&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
<span class="p">}</span>


<span class="n">ENDPOINT</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="s">&#34;/tile/${z}/${x}/${y}&#34;</span><span class="p">,</span> <span class="n">path_test</span><span class="p">,</span> 
        <span class="n">PATH</span><span class="p">(</span><span class="n">Int32</span><span class="p">,</span> <span class="n">z</span><span class="p">),</span> <span class="n">PATH</span><span class="p">(</span><span class="n">Int32</span><span class="p">,</span> <span class="n">x</span><span class="p">),</span> <span class="n">PATH</span><span class="p">(</span><span class="n">Int32</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">HEADER</span><span class="p">(</span><span class="n">Int32</span><span class="p">,</span> <span class="n">param</span><span class="p">))</span>
<span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">stringstream</span> <span class="n">resp</span><span class="p">;</span>
        <span class="n">resp</span><span class="o">&lt;&lt;</span> <span class="s">&#34;zoomlevel = &#34;</span><span class="o">&lt;&lt;</span> <span class="n">z</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span>
                <span class="o">&lt;&lt;</span> <span class="s">&#34;x = &#34;</span><span class="o">&lt;&lt;</span> <span class="n">x</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span>
                <span class="o">&lt;&lt;</span> <span class="s">&#34;y = &#34;</span><span class="o">&lt;&lt;</span> <span class="n">y</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span>
                <span class="o">&lt;&lt;</span> <span class="s">&#34;param = &#34;</span><span class="o">&lt;&lt;</span> <span class="n">param</span><span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="k">auto</span> <span class="n">response</span> <span class="o">=</span> <span class="n">createResponse</span><span class="p">(</span><span class="n">Status</span><span class="o">::</span><span class="n">CODE_200</span><span class="p">,</span> <span class="n">resp</span><span class="p">.</span><span class="n">str</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
    <span class="n">response</span><span class="o">-&gt;</span><span class="n">putHeader</span><span class="p">(</span><span class="n">Header</span><span class="o">::</span><span class="n">CONTENT_TYPE</span><span class="p">,</span> <span class="s">&#34;text/plain&#34;</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">response</span><span class="p">;</span>
<span class="p">}</span>



<span class="cp">#include</span> <span class="cpf">OATPP_CODEGEN_END(ApiController)</span><span class="cp">
</span><span class="cp"></span><span class="p">};</span>
</code></pre></div>
<p>各、URLマッピングは、ENDPOINTマクロを使用する。
ENDPOINTマクロは、OATPP_CODEGEN_BEGIN()と、OATPP_CODEGEN_END()で囲む。
<code>#include OATPP_CODEGEN_BEGIN(ApiController)</code>は、<code>#include oatpp/codegen/codegen_define_ApiController_.hpp</code>に展開される。
oatpp/codegen_define_ApiController_.hppでは、ENDPOINTマクロで使用するマクロ類が宣言されている。</p>

<p>ENDPOINTマクロは、見てわかるように、<code>#define ENDPOINT(METHOD, PATH, NAME, ...)</code>と宣言されており、
oatpp::web::protocol::http::outgoing::Response を返す関数に展開される。
4番目以降のパラメータは、パラメータマッピングで、関数での処理に必要なリクエストパラメータを指定する。</p>

<h4 id="parameter-mapping">Parameter Mapping</h4>

<p>oat++には、以下のパラメータマッピングがある</p>

<ul>
<li><p>ヘッダ</p>

<pre><code>HEADER(&lt;data-type&gt;, &lt;param-name&gt;, &quot;&lt;optional header-name&gt;&quot;)
</code></pre></li>

<li><p>パス</p>

<pre><code>PATH(&lt;data-type&gt;, &lt;param-name&gt;, &quot;&lt;optional path-variable-name&gt;&quot;)
</code></pre></li>

<li><p>クエリ</p>

<pre><code>QUERY(&lt;data-type&gt;, &lt;param-name&gt;, &quot;&lt;optional path-variable-name&gt;&quot;)
</code></pre></li>

<li><p>Body</p>

<pre><code>BODY_STRING(String, &lt;param-name&gt;)
</code></pre></li>

<li><p>リクエスト</p>

<pre><code>REQUEST(std::shared_ptr&lt;IncomingRequest&gt;, request)
</code></pre></li>

<li><p>DTO</p>

<pre><code>BODY_DTO(&lt;DTO-class&gt;::ObjectWrapper, &lt;param-name&gt;)
</code></pre></li>
</ul>

<p>パラメータマッピングは、<a href="https://oatpp.io/docs/components/api-controller/">https://oatpp.io/docs/components/api-controller/</a> にドキュメントがあるが、
正直、どう書くのかほとんどわからなかった。
前掲の<code>controller.hh</code>がサンプルになっていると思う。</p>

<p>data-typeは、以下の型が使えることを確認した。Booleanも使えるかも。</p>

<ul>
<li>String</li>
<li>Int32</li>
<li>Int64</li>
<li>Float32</li>
<li>Float64</li>
</ul>

<h2 id="makefile">Makefile</h2>

<p>一応、Makefileも。</p>
<div class="highlight"><pre class="chroma"><code class="language-Makefile" data-lang="Makefile"><span class="nv">CXX</span><span class="o">=</span>g++
<span class="nv">CXXFLAGS</span><span class="o">=</span>-I /usr/local/include/oatpp-0.19.4/oatpp --std<span class="o">=</span>c++11 -w -Wall
<span class="nv">LDFLAGS</span><span class="o">=</span>-L /usr/local/lib/oatpp-0.19.4/ -loatpp -loatpp-test -lpthread

<span class="nf">all</span><span class="o">:</span> <span class="n">app</span>

<span class="nf">.o</span><span class="o">:</span>.<span class="n">cc</span>
        <span class="k">$(</span>CXX<span class="k">)</span> -c <span class="k">$(</span>CXXFLAGS<span class="k">)</span> $&lt;

<span class="nf">app</span><span class="o">:</span> <span class="n">app</span>.<span class="n">o</span> 
        <span class="k">$(</span>CXX<span class="k">)</span>  -o <span class="nv">$@</span> $&lt; <span class="k">$(</span>LDFLAGS<span class="k">)</span>

<span class="nf">app.o</span><span class="o">:</span> <span class="n">app</span>.<span class="n">cc</span> <span class="n">app_component</span>.<span class="n">hh</span>

<span class="nf">clean</span><span class="o">:</span>
        rm -f app *.o
</code></pre></div>
<p>Hub Fan!</p>
]]></content>
		</item>
		
		<item>
			<title>OpenBSD6.4をインストールしたVPSでIPv6を使う際の注意</title>
			<link>https://www.omoikane.dev/posts/openbsd-ipv6-sakura/</link>
			<pubDate>Wed, 17 Apr 2019 23:03:29 +0900</pubDate>
			
			<guid>https://www.omoikane.dev/posts/openbsd-ipv6-sakura/</guid>
			<description>TL;DR OpenBSD 6.4をインストールしたVPSでIPv6のデフォルトゲートウェイに接続できない時は、 SIIを無効にすること。例えば、さくらインターネット</description>
			<content type="html"><![CDATA[

<h2 id="tl-dr">TL;DR</h2>

<p>OpenBSD 6.4をインストールしたVPSでIPv6のデフォルトゲートウェイに接続できない時は、
SIIを無効にすること。例えば、さくらインターネットの場合、hostname.vio0は以下のようになる。</p>

<pre><code>inet  203.0.113.23 255.255.254.0
inet6 autoconf -autoconfprivacy -soii
inet6 alias 2001:db8:102:3013:203:0:113:23 64
up
!route -nq add -inet6 default fe80::1%vio0
</code></pre>

<hr />

<p>OpenBSDをインストールしたさくらVPSのインスタンスでIPv6の
デフォルトゲートウェイと通信できなくてハマった。
なんとか解決できたのでメモ。</p>

<p>さくらVPSは、グローバルIPv6のIPを一つくれる。
そのゲートウェイはfe80::1である。</p>

<p>OpenBSD 6.3あたりから、Semantically Opaque Interface Identifiers (SOIIs) がデフォルトで有効になっている。
SOIIとはSLAACアドレス（自動で設定されるリンクローカルアドレス）のインターフェース識別子(IID)にMACアドレスを使わずに、
プレフィックスも使ってIIDを生成することで、リングローカルアドレスを生成するというもの（RFC7217）。</p>

<p>以前は、MACアドレスだけからリンクローカルアドレスを生成していた（Modified EUI-64）ため、プレフィックスが変化しても
リンクローカルアドレスから容易にMACアドレスが特定でき、プライバシーやセキュリティの問題があった。
OpenBSDはそれをいやがって、SOIIをデフォルトで有効にしたのだろう。</p>

<p>一方、さくらのゲートウェイは、IIDをMACアドレスから生成する昔ながらのModified EUI-64を前提にフィルタリングしている
と思われる。そのため、SOIIで生成されたアドレスはフィルターされIPv6でインターネットに接続できなかったのだろう。</p>

<p>SIIを無効にするには、上記の例のように、ifconfigのオプションに、-soiiをつける。詳細は、ifconfigのmanページを参照のこと。</p>
]]></content>
		</item>
		
		<item>
			<title>blog restart</title>
			<link>https://www.omoikane.dev/posts/restart/</link>
			<pubDate>Wed, 17 Apr 2019 22:30:18 +0900</pubDate>
			
			<guid>https://www.omoikane.dev/posts/restart/</guid>
			<description>操作ミスで、メールサーバやらWebサーバをホストしていたさくらのVPSを飛ばしてしまったので、 ドメインも変えてやりなおすことにしました。 この</description>
			<content type="html"><![CDATA[<p>操作ミスで、メールサーバやらWebサーバをホストしていたさくらのVPSを飛ばしてしまったので、
ドメインも変えてやりなおすことにしました。</p>

<p>このblogはガチ技術よりにしようかと思っています。どうぞよろしくお願いします。</p>
]]></content>
		</item>
		
	</channel>
</rss>
